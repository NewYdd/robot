// Generated by gencpp from file communication/command.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_MESSAGE_COMMAND_H
#define COMMUNICATION_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication
{
template <class ContainerAllocator>
struct command_
{
  typedef command_<ContainerAllocator> Type;

  command_()
    : type()
    , command_lenth(0)
    , break_flag(false)
    , wrong_flag(false)
    , data()  {
    }
  command_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , command_lenth(0)
    , break_flag(false)
    , wrong_flag(false)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef int32_t _command_lenth_type;
  _command_lenth_type command_lenth;

   typedef uint8_t _break_flag_type;
  _break_flag_type break_flag;

   typedef uint8_t _wrong_flag_type;
  _wrong_flag_type wrong_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::communication::command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication::command_<ContainerAllocator> const> ConstPtr;

}; // struct command_

typedef ::communication::command_<std::allocator<void> > command;

typedef boost::shared_ptr< ::communication::command > commandPtr;
typedef boost::shared_ptr< ::communication::command const> commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication::command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication::command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'communication': ['/home/dtrobot/robot/src/communication/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::communication::command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication::command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aca34a37a304222eedcceaa227a8290b";
  }

  static const char* value(const ::communication::command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaca34a37a304222eULL;
  static const uint64_t static_value2 = 0xedcceaa227a8290bULL;
};

template<class ContainerAllocator>
struct DataType< ::communication::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication/command";
  }

  static const char* value(const ::communication::command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n\
int32 command_lenth\n\
bool  break_flag\n\
bool  wrong_flag\n\
string data\n\
\n\
";
  }

  static const char* value(const ::communication::command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication::command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.command_lenth);
      stream.next(m.break_flag);
      stream.next(m.wrong_flag);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication::command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication::command_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "command_lenth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_lenth);
    s << indent << "break_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.break_flag);
    s << indent << "wrong_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrong_flag);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_MESSAGE_COMMAND_H
